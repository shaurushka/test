getPropsOnFreqsFromZeroToMax <- function(propsOnPositiveFreqs, maxFreq) {
  propsOnFreqsFromOneToMax <- c()
  if (maxFreq > 1) {
    propsOnFreqsFromOneToMax <- propsOnPositiveFreqs[1 : (maxFreq - 1)]
  }
  propsOnFreqsFromOneToMax <- c(propsOnFreqsFromOneToMax,
                                sum(propsOnPositiveFreqs[maxFreq : length(propsOnPositiveFreqs)]))
  propsOnFreqsFromOneToMax[is.na(propsOnFreqsFromOneToMax)] <- 0
  return (c(1 - sum(propsOnPositiveFreqs), propsOnFreqsFromOneToMax))
}

makePropsOnFreqsIfOneNonZeroFreq <- function(grp, nonZeroFreq, maxFreq) {
  if ((grp$Published > 0) & (nonZeroFreq == maxFreq)) {
    grp$Published = 0
  }
  propsOnFreqsPublished <- rep(0, maxFreq + 1)
  
  x <- abs(grp$Published) / 100
  propsOnFreqsPublished[nonZeroFreq + 1] <- 1 - x
  if ((grp$Published < 0) & (nonZeroFreq > 0)) {
      propsOnFreqsPublished[nonZeroFreq] <- x
  }
  if ((grp$Published > 0) & (nonZeroFreq < maxFreq)) {
    propsOnFreqsPublished[nonZeroFreq + 2] <- x
  }
  return (propsOnFreqsPublished)
}

makePoissonPropsOnFreqs <- function(maxFreqToCalculate, grp) {
  lambda <- lapply(grp, function(x) x / 100)
  
  Poisson <- list(MiddleDay = numeric(maxFreqToCalculate + 1), Published = numeric(maxFreqToCalculate + 1))
  Poisson$MiddleDay[1] <- exp(-lambda$MiddleDay)
  Poisson$Published[1] <- exp(-lambda$Published)
  
  if (maxFreqToCalculate > 0) {
    for (freq in 1 : maxFreqToCalculate) {
      Poisson$MiddleDay[freq + 1] <- lambda$MiddleDay * Poisson$MiddleDay[freq] / freq
      Poisson$Published[freq + 1] <- lambda$Published * Poisson$Published[freq] / freq
    }
  }
  return (Poisson)
}

makeStepInNBDParameterEstimation <- function(a, c) {
  return (c * (a - (1 + a) * log(1 + a)) / (1 + a + c))
}

estimateNBDParameterIteratively <- function(constantInNBD, prec) {
  aNBD <- -2 * (1 + constantInNBD)
  b <- aNBD
  aNBD <- makeStepInNBDParameterEstimation(aNBD, constantInNBD)
  it <- 1
  maxIt <- 20000
  while (abs(b - aNBD) >= prec & it < maxIt) {
    it <- it + 1
    b <- aNBD
    aNBD <- makeStepInNBDParameterEstimation(aNBD, constantInNBD)
  }
  # output is not necessary. i've added it just in case to detect that the algorithm has not converged. 
  # if (it == maxIt) {
    # print("In estimateNBDParameterIteratively. Process has not converged")
  # }
  return (aNBD)
}

makeNBDPropsOnFreqs <- function(maxFreqToCalculate, grp, nonVeiwersProp, constantInNBD, prec) {
  aNBD <- list(MiddleDay = estimateNBDParameterIteratively(constantInNBD, prec), Published = numeric(0))
  aNBD$Published <- aNBD$MiddleDay * grp$Published / grp$MiddleDay
  
  kNBD <- grp$MiddleDay / (100 * aNBD$MiddleDay)
  
  NBD <- list(MiddleDay = numeric(maxFreqToCalculate + 1), Published = numeric(maxFreqToCalculate + 1))
  NBD$MiddleDay[1] <- nonVeiwersProp
  NBD$Published[1] <- (1 / (1 + aNBD$Published)) ** kNBD

  aNBD <- lapply(aNBD, function(x) x / (1 + x))
  
  if (maxFreqToCalculate > 0) {
    for (freq in 1 : maxFreqToCalculate) {
      x <- (kNBD + freq - 1) / freq
      NBD$MiddleDay[freq + 1] <- x * aNBD$MiddleDay * NBD$MiddleDay[freq]
      NBD$Published[freq + 1] <- x * aNBD$Published * NBD$Published[freq]
    }
  }
  return (NBD)
}

getModelledPropsOnFreqs <- function(maxFreqToCalculate, grp, nonVeiwersProp, prec) {
  constantInNBD <- grp$MiddleDay / (100 * log(nonVeiwersProp))
  constantInNBDMax <- -1.1
  if (constantInNBD >= constantInNBDMax) {
    return (makePoissonPropsOnFreqs(maxFreqToCalculate, grp))
  }
  return (makeNBDPropsOnFreqs(maxFreqToCalculate, grp, nonVeiwersProp, constantInNBD, prec))
}

getPropsOnFreqsCorrected <- function(propsOnFreqsRaw, propsOnFreqsModelled, maxFreq) {
  firstNonZeroFreq <- maxFreq - length(propsOnFreqsModelled$Published) + 1
  propsOnFreqsCorrected <- propsOnFreqsModelled$Published + propsOnFreqsRaw[(firstNonZeroFreq + 1) : (maxFreq + 1)] - 
                           propsOnFreqsModelled$MiddleDay
  propsOnFreqsCorrected <- head(propsOnFreqsCorrected, -1)
  return (c(rep(0, firstNonZeroFreq), propsOnFreqsCorrected, 1 - sum(propsOnFreqsCorrected)))
}

makeStdNBDCorrection <- function(grp, propsOnFreqsRaw, maxFreq, prec = 1e-10) {
  result <- list(Corrected = numeric(0), Modelled = list(), GRPModelled = grp)
  if (maxFreq == 1)  {
    result$Modelled <- makePoissonPropsOnFreqs(maxFreq, grp)
    result$Corrected <- getPropsOnFreqsCorrected(propsOnFreqsRaw, result$Modelled, maxFreq)
    return (result)
  }
  
  firstNonZeroFreq <- min(which(propsOnFreqsRaw > 0)) - 1
  grp <- lapply(grp, FUN = function(x) x - 100 * firstNonZeroFreq)
  
  firstNonZeroProp <- propsOnFreqsRaw[firstNonZeroFreq + 1]
  if (abs(firstNonZeroProp - 1) < prec) {
    result$Corrected <- makePropsOnFreqsIfOneNonZeroFreq(grp, firstNonZeroFreq, maxFreq)
    return (result)
  }
  result$Modelled <- getModelledPropsOnFreqs(maxFreq - firstNonZeroFreq, grp, firstNonZeroProp, prec)
  result$GRPModelled <- grp
  result$Corrected <- getPropsOnFreqsCorrected(propsOnFreqsRaw, result$Modelled, maxFreq)
  return (result)
}

# makeExtNBDCorrection <- function(stdCorrection, propsOnFreqsRaw, maxFreq, prec) {
  # propsOnFreqsModelledStd <- stdCorrection$Modelled
  
  # if (length(propsOnFreqsModelledStd) > 0) {
    # types <- names(stdCorrection$Modelled)
    # propsOnFreqsModelledExt <- lapply(types, 
                                      # function(type) makeExtNBDCorrectionFromStd(stdCorrection$Modelled[[type]], 
                                                                                 # stdCorrection$GRPModelled[[type]], 
                                                                                 # prec))
    # names(propsOnFreqsModelledExt) <- types
    # return (getPropsOnFreqsCorrected(propsOnFreqsRaw, propsOnFreqsModelledExt, maxFreq))
  # }
  # return (makeExtNBDCorrectionFromStd(stdCorrection$Corrected, stdCorrection$GRPModelled, prec))
# }

makePropsOnFreqsNBDCorrection <- function(grp, propsOnFreqsMiddleDay, maxFreq, blockIDsCount, type = "Std") {
  propsOnFreqs <- data.frame(data = matrix(0L, nrow = maxFreq + 1, ncol = 3))
  colnames(propsOnFreqs) <- c("MiddleDay", "Published", "PublishedExt")

  propsOnFreqs$MiddleDay <- getPropsOnFreqsFromZeroToMax(propsOnFreqsMiddleDay, maxFreq)
  
  stdCorrection <- makeStdNBDCorrection(grp, propsOnFreqs$MiddleDay, maxFreq, prec = 1e-10)
  propsOnFreqs$Published <- stdCorrection$Corrected  
  #extended nbd will be added later
  # if (type == "Ext") {
    # if (blockIDsCount == 1) {
      # propsOnFreqs$PublishedExt <- propsOnFreqs$Published
    # }
    # else {
      # propsOnFreqs$PublishedExt <- makeExtNBDCorrection(stdCorrection, propsOnFreqs$MiddleDay, maxFreq, prec = 1e-15)
    # }
  # } 
  return (propsOnFreqs)
}

# вычисляются открытые интервалы, начиная с 0+
getOpenIntervals <- function(propsOnFreqsCloseIntervals) {
  openIntervals <- propsOnFreqsCloseIntervals
  for (i in (length(openIntervals) - 1) : 1) {
    openIntervals[i] <- openIntervals[i] + openIntervals[i + 1]
  }
  return (openIntervals)
}

