demographyInfoQry <- function(dbConn, TGSqlDef = "") {
  return (sqlQuery(dbConn, paste("
    drop table #demSample, #dateInfo

    select *, round([Weight], 10) as [WeightRounded]
    into #demSample
    from [TNS].[dbo].[Demography]
    where year([Date]) = 2017 ", TGSqlDef, "

    select
      t1.[Date]
      , round(t2.[PF], 10) * t1.[TGSampleSize] as [TGSize '000]
      , round(t2.[PF], 10) as [PF]
      , t2.[RespondentsCount]
      , t2.[Universe]
    into #dateInfo
    from (
      select
        [Date]
        , sum([WeightRounded]) as [TGSampleSize]
      from #demSample
      group by [Date]
      ) as t1
    join [TNS].[dbo].[DateInfo] as t2
    on t1.[Date] = t2.[Date]
    ", sep = "")))
}

blockIDsTableQry <- function(dbConn, blockIDsList) {
  return(sqlQuery(dbConn, paste("
    declare @blockIDsList as nvarchar(max) = '", blockIDsList, "'

    drop table #TNSBlockIdsList
    select
      row_number() over (order by (select 1)) as [BlockIdsRank]
      , [TNSBlockId]
    into #TNSBlockIdsList
    from (
      select Split.a.value('.', 'VARCHAR(50)') as [TNSBlockId]
      from (
        select cast('<M>' + replace(@blockIDsList, ',', '</M><M>') + '</M>' as xml) as String
      ) as A
      cross apply String.nodes('/M') as Split (a)
    ) as t

    drop table #TNSBlockIdsListInfo
    select *
    into #TNSBlockIdsListInfo
    from (
        select distinct
          t1.[TNSBlockID]
          , t1.[Date]
          , t1.[BTMin]
          , t2.[BlockIdsRank]
        from [TNS].[dbo].[TvWatchingTNS] as t1
        join #TNSBlockIdsList as t2
        on t1.[TNSBlockID] = t2.[TNSBlockID]
    ) as t
    ", sep="")))
}

middleDayFirstBlockIDQry <- function(dbConn) {
  return (as.character(sqlQuery(dbConn, "
    select top (1)
      [Date]
    from #TNSBlockIdsListInfo
    order by [BlockIdsRank]
    ")[1, ]))
}

watchingInfoQry <- function(dbConn, middleDay) {
  return(sqlQuery(dbConn, paste("
    drop table #watchingInfo
    select
      t1.*
      , isnull(t2.[WeightRounded], 0) as [MiddleDayWeight]
    into #watchingInfo
    from (
      select
        t1.[Date]
        , t1.[TNSBlockID]
        , t1.[MemberNumber]
        , sum(t1.[DTMin]) as [DTMin]
        , max(t1.[BTMin]) as [BTMin]
        , max(t2.[WeightRounded]) as [PublishedDayWeight]
      from (
        select t1.*, t2.[BlockIdsRank]
        from [TNS].[dbo].[TvWatchingTNS] as t1
        join #TNSBlockIdsList as t2
        on t1.[TNSBlockID] = t2.[TNSBlockID]
      ) as t1
      join #demSample as t2
      on t1.[MemberNumber] = t2.[MemberNumber] and t1.[Date] = t2.[Date]
      group by t1.[Date], t1.[TNSBlockID], t1.[MemberNumber]
    ) as t1
    left join (
      select *
      from #demSample
      where [Date] = '", middleDay, "'
    ) as t2
    on t1.[MemberNumber] = t2.[MemberNumber]
    ", sep = "")))
}

middleDayPFQry <- function(dbConn, middleDay) {
  return (sqlQuery(dbConn, paste("
    select [PF]
    from #dateInfo
    where [Date] = '", middleDay, "'", sep = ""))[1, ])
}

middleDayTGSizeQry <- function(dbConn, middleDay) {
  return (sqlQuery(dbConn, paste("
    select [TGSize '000]
    from #dateInfo
    where [Date] = '", middleDay, "'", sep = ""))[1, ])
}

blockIDsStatsQry <- function(dbConn, middleDay, middleDayPF) {
  return (sqlQuery(dbConn, paste("
    declare @middleDayPF float(53)
    set @middleDayPF = ", middleDayPF, "

    drop table #TNSBlockIDsStats
    select distinct
      t1.[TNSBlockID]
      , t1.[BlockIdsRank]
      , t1.[PublishedSampleAudience] * t2.[PF] as [Audience]
      , t1.[PublishedSampleAudience] * t2.[PF] * 100.0 / t2.[TGSize '000] as [TVR]
      , t1.[PublishedSampleReach] * t2.[PF] as [Reach '000]
      , t1.[PublishedSampleReach] * t2.[PF] * 100.0 / t2.[TGSize '000] as [Reach %]
      , t1.[MiddleDaySampleAudience] * @middleDayPF as [MiddleDayAudience]
      , t1.[MiddleDaySampleReach] * @middleDayPF as [MiddleDay Reach '000]
      , t2.[TGSize '000]
      , t1.[BTMin]
      , t2.[PF]
      , t2.[Universe]
      , t1.[Date]
    into #TNSBlockIDsStats
    from (
      select
        t2.*
        , isnull(t1.PublishedSampleAudience, 0) as PublishedSampleAudience
        , isnull(t1.PublishedSampleReach, 0) as PublishedSampleReach
        , isnull(t1.MiddleDaySampleAudience, 0) as MiddleDaySampleAudience
        , isnull(t1.MiddleDaySampleReach, 0) as MiddleDaySampleReach
      from (
        select
          [TNSBlockId]
          , sum([PublishedDayWeight] * [DTMin] / [BTMin]) as PublishedSampleAudience
          , sum([PublishedDayWeight] * (case when [DTMin] > 0 then 1 else 0 end)) as PublishedSampleReach
          , sum([MiddleDayWeight] * [DTMin] / [BTMin]) as MiddleDaySampleAudience
          , sum([MiddleDayWeight] * (case when [DTMin] > 0 then 1 else 0 end)) as MiddleDaySampleReach
        from #watchingInfo
        group by [TNSBlockId], [Date]
      ) as t1
      right join #TNSBlockIdsListInfo as t2
      on t1.[TNSBlockID] = t2.[TNSBlockID]
    ) as t1
    join #dateInfo as t2
    on t1.[Date] = t2.[Date]
    ", sep = "")))
}

grpTopNBlockIDsQry <- function(dbConn, topN, middleDayTGSize){
  sqlQuery(dbConn, paste("
    declare @middleDayTGSize float(53)
    set @middleDayTGSize = '", middleDayTGSize, "'

    drop table #grpMiddleDayAndPublished
    select
      sum([Reach '000] * 100 / [TGSize '000])  as [Published]
      , (
          case
          when (", topN, " = 1)
          then sum([Reach '000])
          else sum([MiddleDay Reach '000])
          end
          * 100) / @middleDayTGSize as [MiddleDay]
    into #grpMiddleDayAndPublished
    from (
      select t1.*
      from #TNSBlockIDsStats as t1
      join (
        select top (", topN, ") [TNSBlockID]
        from #TNSBlockIdsList
        ) as t2
      on t1.[TNSBlockID] = t2.[TNSBlockID]
    ) as t
    ", sep = ""))
  return(sqlQuery(dbConn, "select * from #grpMiddleDayAndPublished"))
}

freqsTableQry <- function(dbConn) {
  return(sqlQuery(dbConn, paste("
    drop table #memberFreqs
    select
      [MemberNumber]
      , count (distinct [TNSBlockID]) as Frequency
    into #memberFreqs
    from  #watchingInfo
    group by [MemberNumber]

    declare @maxFreq int
    set @maxFreq = (
      select max([Frequency])
      from #memberFreqs
    )

    drop table #freqsTable
    create table #freqsTable (
      [Frequency] int
    )

    declare @freq int = 1
    while (@freq <= @maxFreq)
    begin
      insert into #freqsTable ([Frequency]) values (@freq)
      set @freq = @freq + 1
    end
  ")))
}

cumReachOnFreqsTopNBlockIDsQry <- function(dbConn, topN, middleDayPFTopN) {
  sqlQuery(dbConn, paste("
    declare @topN int
    set @topN = ", topN, "

    declare @middleDayPF float(53)
    set @middleDayPF = ", middleDayPFTopN, "

    drop table #reach
    select
      isnull(t1.ReachOnFrequency, 0) as ReachOnFrequency
    into #reach
    from (
      select
        Frequency
        , sum([Weight]) * @middleDayPF as ReachOnFrequency
      from (
        select
          [MemberNumber]
          , count (distinct [TNSBlockID]) as Frequency
          , (case when (@topN = 1) then max([PublishedDayWeight]) else max([MiddleDayWeight]) end) as [Weight]
        from (
          select t1.*
          from #watchingInfo as t1
          join (select top (@topN) [TNSBlockID] from #TNSBlockIdsList order by [BlockIdsRank]) as t2
          on t1.[TNSBlockID] = t2.[TNSBlockID]
        ) as t
        group by [MemberNumber]
      ) as t
      group by Frequency
    ) as t1
    right join #freqsTable as t2
    on t1.[Frequency] = t2.[Frequency]
    order by t1.[Frequency]", sep = ""))
  return(sqlQuery(dbConn, "select * from #reach")$ReachOnFrequency)
}

# в R корректно не работает, какие-то проблемы с SQL циклом (не доходит до конца), 
# поэтому пришлось по циклу в R делать запрос cumReachOnFreqsTopNBlockIDsQry (см. выше) для каждого topN
# если в питоне эта команда сработает, может быть скрипт заработает чуть быстрее
# тогда нужно будет слегка модифицировать метод getRawCumStatsFromSQL из main.R
cumReachOnFreqsUpToMaxTopNBlockIDsQry <- function (maxN, middleDayPFFirstBlockID, middleDayPFOverall) {
  return (paste("
    drop table #reachOnFreqsTopNBlockIDs
    create table #reachOnFreqsTopNBlockIDs (
      [topN] int,
      [Frequency] int,
      [ReachOnFrequency] float(53)
    )

    declare @middleDayPF float(53)
    set @middleDayPF = ", middleDayPFFirstBlockID, "

    declare @maxN int = ", maxN, "

    declare @topN int = 1
    while (@topN <= @maxN)
    begin
      insert into #reachOnFreqsTopNBlockIDs([topN], [Frequency], [ReachOnFrequency])
      select
        @topN as topN
    		, t2.[Frequency] as [Frequency]
    		, isnull(t1.ReachOnFrequency, 0) as ReachOnFrequency
    	from (
    		select
    		  Frequency
    			, sum([Weight]) * @middleDayPF as ReachOnFrequency
    		from (
    			select
    				[MemberNumber]
    				, count (distinct [TNSBlockID]) as Frequency
    				, (case when (@topN = 1) then max([PublishedDayWeight]) else max([MiddleDayWeight]) end) as [Weight]
    			from (
            select t1.*
        		from #watchingInfo as t1
            join (
              select top (@topN) [TNSBlockID]
              from #TNSBlockIdsList
              order by [BlockIdsRank]
            ) as t2
            on t1.[TNSBlockID] = t2.[TNSBlockID]
    			) as t
    			group by [MemberNumber]
    		) as t
    		group by Frequency
    	) as t1
    	right join #freqsTable as t2
    	on t1.[Frequency] = t2.[Frequency]

      set @middleDayPF = ", middleDayPFOverall, "
      set @topN = @topN + 1
    end
  ", sep = ""))
}
